name: Publish Node Telicent image to configured container repositories

on:
  workflow_call:
    inputs:
      APP_NAME_PREFIX:
        required: false
        type: string
        default: telicent-
        description: |
          The prefix for the image name, defaults to telicent- but can be set to an empty string if you prefer to just
          use APP_NAME as the application name.
      APP_NAME:
        required: true
        type: string
        description: |
          The name for the application used as the main portion of the image name.
      DOCKERFILE:
        required: true
        type: string
        description: |
          The name of the Dockerfile to build the image from.  This is relative to the PATH input
      PATH:
        type: string
        description: |
          The path in which the Dockerfile is located. For current path leave empty. Otherwise eg. ./frontend
        default: .
      TARGET:
        type: string
        required: false
        description: |
          The build target within the Dockerfile to build the image from.
      BUILD_ARGS:
        type: string
        required: false
        description: |
          Additional build arguments to pass to the Docker --build-arg flag.
      VERSION:
        required: true
        type: string
        description: |
          The version for the image, used in tagging the image.
      VERSION_SUFFIX:
        required: false
        type: string
        description: |
          Optional suffix for the version of the image, used in tagging the image.
      IMAGE_SUFFIX: # Previously ECR_SUFFIX
        required: false
        type: string
        description: |
          Optional suffix used as part of the image name.
      MAIN_BRANCH:
        required: false
        type: string
        default: main
        description: |
          Specifies the main branch for the repository, defaults to main.  If this build is on the configured main
          branch then the latest tag will be added to the image, if the build is on another branch then the development
          tag will be added to the image.
      USES_MAVEN:
        required: false
        type: boolean
        default: false
        description: |
          Whether your build requires the JDK and Maven to be present.
      JAVA_VERSION:
        required: false
        type: number
        default: 21
        description: |
          Specifies the JDK version to install and build with.  Defaults to 21.
      JDK:
        required: false
        type: string
        default: temurin
        description: |
          Specifies the JDK to use, defaults to temurin.
      ALLOW_MUTABLE_TAGS:
        required: false
        type: boolean
        default: true
        description: |
          Set `false` to avoid adding mutable tags like `latest` and `development` e.g. if image registry has mutable tags disabled, and it will 400s when given mutable tags
      PACKAGE_DIRECTORY:
        required: false
        type: string
        default: .
        description: If Github release has multiple packages with SBOMs, then this can be used to disambiguate each package's SBOM
      DOWNLOAD_SBOM:
        required: false
        type: boolean
        default: true
        description: |
          Set `false` to avoid trying to download SBOM artifacts (and if it fails, avoid "sbom not found" errors). Used by certain workflows that don't need to download SBOMs
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
      packages: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4.2.1

      - name: Install Java and Maven
        if: ${{ inputs.USES_MAVEN }}
        uses: actions/setup-java@v4.4.0
        with:
          java-version: ${{ inputs.JAVA_VERSION }}
          distribution: ${{ inputs.JDK }}
          cache: maven

      # NB - Assumption here is that this workflow has been called after the Maven workflow has been called so the 
      #      Maven Cache already has all our dependencies present in it and tests have already passed
      - name: Quick Maven Build
        if: ${{ inputs.USES_MAVEN }}
        run: |
          mvn verify --batch-mode -DskipTests -Dgpg.skip=true

      - name: Get SBOM from artifact
        uses: actions/download-artifact@v4.1.8
        if: ${{ inputs.DOWNLOAD_SBOM }}
        continue-on-error: true
        with:
          name: ${{ github.run_number }}${{ inputs.PACKAGE_DIRECTORY != '.' && format('.{0}', inputs.PACKAGE_DIRECTORY) || '' }}.sbom.json
          path: ${{ inputs.PATH }} 

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3.2.0
        with:
          platforms: all

      - name: Set up Docker buildx
        id: buildx
        uses: docker/setup-buildx-action@v3.7.1

      - name: Enable buildkit cache
        uses: actions/cache@v4.1.1
        with:
          path: /tmp/buildkit-cache/buildkit-state.tar
          key: ${{ runner.os }}-buildkit-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildkit-

      - name: Load buildkit state from cache
        uses: dashevo/gh-action-cache-buildkit-state@v1.0.3
        with:
          builder: buildx_buildkit_${{ steps.buildx.outputs.name }}0
          cache-path: /tmp/buildkit-cache
          cache-max-size: 3g

      - name: Login to Docker Hub
        uses: docker/login-action@v3.3.0
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Prepare Docker Image Names and Tags
        id: meta
        uses: docker/metadata-action@v5.5.1
        with:
          # Defines the base image names in repository/name format
          images: |
            telicent/${{ inputs.APP_NAME_PREFIX }}${{ inputs.APP_NAME }}${{ inputs.IMAGE_SUFFIX }}
          # Manually handling latest below so disabling automatic latest handling
          flavor: |
            latest=false
          # Creates tags based on various criteria
          #
          # For any tag, and more specifically semver tags i.e. v1.2.3, use the Git tag/semver as-is
          # A long format SHA hash for all builds
          # The developer provided version for all builds
          # A latest tag, if and only if, this commit is on the main branch
          # A development tag, if this commit is not on the main branch
          tags: |
            type=ref,event=tag
            type=semver,pattern={{version}}
            type=sha,format=long,prefix=
            type=raw,value=${{ inputs.VERSION }}${{ inputs.VERSION_SUFFIX }}
            type=raw,value=latest,enable=${{ inputs.ALLOW_MUTABLE_TAGS && github.ref_name == inputs.MAIN_BRANCH }}
            type=raw,value=development,enable=${{ inputs.ALLOW_MUTABLE_TAGS && github.ref_name != inputs.MAIN_BRANCH}}
      - name: Build, tag, and push image to authenticated docker registry
        id: build-images
        uses: docker/build-push-action@v6.9.0
        with:
          builder: ${{ steps.buildx.outputs.name }}
          platforms: linux/amd64,linux/arm64
          # Dependabot triggered PRs don't have credentials to push images
          push: ${{ github.actor != 'dependabot[bot]' }}
          context: ${{ inputs.PATH }}
          file: ${{ inputs.PATH }}/${{ inputs.DOCKERFILE }} # NOTE: relative path (inputs.PATH defaults to '.')
          tags: ${{ steps.meta.outputs.tags }}
          target: ${{ inputs.TARGET }}
          build-args: |
            ${{ inputs.BUILD_ARGS }}

  scan-dockerfile-configuration:
    uses: Telicent-oss/shared-workflows/.github/workflows/trivy-dockerfile-scan.yml@main
    with:
      DOCKERFILE: ${{ inputs.PATH }}/${{ inputs.DOCKERFILE }} # NOTE: relative path (inputs.PATH defaults to '.')
      SCAN_NAME: ${{ inputs.APP_NAME_PREFIX }}${{ inputs.APP_NAME }}${{ inputs.IMAGE_SUFFIX }}

  trivy-scan-image:
    needs: build
    uses: telicent-oss/shared-workflows/.github/workflows/trivy-image-scan.yml@main
    secrets: inherit
    # Since Dependabot builds can't push an image we skip the scan workflow because there won't be
    # an image for it to pull down and scan
    if: ${{ github.actor != 'dependabot[bot]' }}
    with:
      IMAGE_REF: telicent/${{ inputs.APP_NAME_PREFIX }}${{ inputs.APP_NAME }}${{ inputs.IMAGE_SUFFIX }}:${{ github.sha }}
      SCAN_NAME: ${{ inputs.APP_NAME_PREFIX }}${{ inputs.APP_NAME }}${{ inputs.IMAGE_SUFFIX }}
  grype-scan-image:
    needs: build
    uses: Telicent-oss/shared-workflows/.github/workflows/grype-image-scan.yml@main
    secrets: inherit
    # Since Dependabot builds can't push an image we skip the scan workflow because there won't be
    # an image for it to pull down and scan
    if: ${{ github.actor != 'dependabot[bot]' }}
    with:
      IMAGE_REF: telicent/${{ inputs.APP_NAME_PREFIX }}${{ inputs.APP_NAME }}${{ inputs.IMAGE_SUFFIX }}:${{ github.sha }}
      SCAN_NAME: ${{ inputs.APP_NAME_PREFIX }}${{ inputs.APP_NAME }}${{ inputs.IMAGE_SUFFIX }}