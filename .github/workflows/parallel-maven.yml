name: Maven Build

on:
  workflow_call:
    inputs:
      DOCKER_PROFILE:
        required: false
        type: string
        default: docker
        description: |
          Specifies the name of the profile that enables/disables Docker based tests.
      USES_DOCKERHUB_IMAGES:
        required: false
        type: boolean
        default: false
        description: |
          Specifies whether this build needs to pull images from DockerHub.
      MAVEN_ARGS:
        required: false
        type: string
        default: ""
        description: |
          Specifies any additional arguments to pass to the Maven invocations.
      MAVEN_DEBUG_ARGS:
        required: false
        type: string
        default: ""
        description: |
          Specifies any additional arguments to pass to the Maven invocations when the workflow is run in 
          debug mode.
      MAVEN_BUILD_GOALS:
        required: false
        type: string
        default: install
        description: |
          Specifies the Maven goal(s) to use when building the project.  Defaults to `install`.
      MAVEN_DEPLOY_GOALS:
        required: false
        type: string
        default: deploy
        description: |
          Specifies the Maven goal(s) to use when deploying the project, assuming `PUBLISH_SNAPSHOTS` was set to `true`
          and we're on the configured `MAIN_BRANCH`.  Defaults to `deploy`.
      MAVEN_REPOSITORY_ID:
        required: false
        type: string
        default: sonatype-oss
        description: |
          Specifies the ID of the repository to which `SNAPSHOT`s and Releases are published, this **MUST** match 
          the ID of a repository defined in the `pom.xml` for the project in order for credentials to be correctly 
          configured.
      JAVA_VERSION:
        required: false
        type: number
        default: 21
        description: |
          Specifies the JDK version to install and build with.  Defaults to 21.
      JDK:
        required: false
        type: string
        default: temurin
        description: |
          Specifies the JDK to use, defaults to `temurin`.
      MAIN_BRANCH:
        required: false
        type: string
        default: main
        description: |
          Specifies the main branch for the repository.  Used in determining whether to publish `SNAPSHOT`s in 
          conjunction with the `PUBLISH_SNAPSHOTS` parameter.
      PUBLISH_SNAPSHOTS:
        required: false
        type: boolean
        default: true
        description: |
          Specifies whether Maven `SNAPSHOT`s are published from this build.  Note that even when enabled (as is
          the default) `SNAPSHOT`s are only published when a build occurs on the main branch.  The main branch 
          can be separately configured via the `MAIN_BRANCH` parameter.
      CHANGELOG_FILE:
        required: false
        type: string
        default: CHANGELOG.md
        description: |
          Specifies the Change Log file in the repository from which release notes can be extracted.
      RELEASE_FILES:
        required: false
        type: string
        description: |
          Specifies the release files that should be attached to the GitHub release.  For example a 
          downloadable package that is generated from the repository.  Regardless of this value we 
          will always attach the SBOMs to the release.
    secrets:
      MVN_USER_NAME:
        required: false
        description: |
          Username for authenticating to a Maven repository to publish `SNAPSHOT`s, only needed if `SNAPSHOT`
          publishing is enabled.
      MVN_USER_PWD:
        required: false
        description: |
          Password/Token for authenticating to a Maven repository to publish `SNAPSHOT`s, only needed if `SNAPSHOT`
          publishing is enabled.
      DOCKER_READ_USER:
        required: false
        description: |
          Username for authenticating to DockerHub, only needed if `USES_DOCKERHUB_IMAGES` is set to true.
      DOCKER_READ_PWD:
        required: false
        description: |
          Password/Token for authenticating to DockerHub, only needed if `USES_DOCKERHUB_IMAGES` is set to true.
      GPG_PRIVATE_KEY:
        required: false
        description: |
          A GPG Private Key that will be used to sign the built artifacts during the build process.  The `pom.xml`
          **MUST** invoke the `maven-gpg-plugin` for this to have an effect.
      GPG_PASSPHRASE:
        required: false
        description: |
          The passphrase protecting the provided GPG Private Key.

    outputs:
      version: 
        description: The detected Maven Version of the project as configured in the top level pom.xml
        value: ${{ jobs.scan-and-publish.outputs.version }}
      is-snapshot:
        description: Whether the Maven build was for a `SNAPSHOT` version.
        value: ${{ jobs.scan-and-publish.outputs.version != '' && contains(jobs.scan-and-publish.outputs.version, 'SNAPSHOT') }}
      
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  cache-dependencies:
    uses: telicent-oss/shared-workflows/.github/workflows/maven-cache-dependencies.yml@main
    with:
      JAVA_VERSION: ${{ inputs.JAVA_VERSION }}
      JDK: ${{ inputs.JDK }}

  detect-modules:
    needs: cache-dependencies
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    outputs:
      modules: ${{ steps.modules.outputs.modules }}
    steps:
      - name: Check out Git repository
        uses: actions/checkout@v4

      - name: Install Java and Maven
        uses: actions/setup-java@v4
        with:
          java-version: ${{ inputs.JAVA_VERSION }}
          distribution: ${{ inputs.JDK }}
          cache: maven

      # NB - This is needed because sometimes Maven won't resolve internal project dependencies
      #      if this is the very first build for that version e.g. just after a version bump
      - name: Quick Maven Build
        run: |
          mvn install -DskipTests -Dgpg.skip -q

      - name: Detect Maven Modules
        id: modules
        run: |
          echo -n "modules=" >> "$GITHUB_OUTPUT"
          mvn exec:exec -Dexec.executable=echo -Dexec.args='${project.artifactId}' -q | jq --raw-input --slurp -c 'split("\n") | map(select(. != ""))' >> "${GITHUB_OUTPUT}"
  
  build:
    needs: detect-modules
    strategy:
      matrix:
        module: ${{ fromJSON(needs.detect-modules.outputs.modules) }} 
      fail-fast: false
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Check out Git repository
        uses: actions/checkout@v4
      
      - name: Install Java and Maven
        uses: actions/setup-java@v4
        with:
          java-version: ${{ inputs.JAVA_VERSION }}
          distribution: ${{ inputs.JDK }}
          cache: maven

      - name: Build Required Modules without Tests
        run: |
          if [ "${{ runner.debug }}" -eq 1 ] 2>/dev/null; then
            mvn ${{ inputs.MAVEN_BUILD_GOALS }} --batch-mode -U -P${{ inputs.DOCKER_PROFILE }} -pl :${{ matrix.module }} -am -DskipTests -Dgpg.skip ${{ inputs.MAVEN_ARGS }} ${{ inputs.MAVEN_DEBUG_ARGS }}
          else
            mvn ${{ inputs.MAVEN_BUILD_GOALS }} --batch-mode -U -P${{ inputs.DOCKER_PROFILE }} -pl :${{ matrix.module }} -am -DskipTests -Dgpg.skip ${{ inputs.MAVEN_ARGS }}
          fi

      - name: Build and Verify Maven Module
        run: |
          if [ "${{ runner.debug }}" -eq 1 ] 2>/dev/null; then
            mvn ${{ inputs.MAVEN_BUILD_GOALS }} --batch-mode -U -P${{ inputs.DOCKER_PROFILE }} -pl :${{ matrix.module }} -Dgpg.skip ${{ inputs.MAVEN_ARGS }} ${{ inputs.MAVEN_DEBUG_ARGS }}
          else
            mvn ${{ inputs.MAVEN_BUILD_GOALS }} --batch-mode -U -P${{ inputs.DOCKER_PROFILE }} -pl :${{ matrix.module }} -Dgpg.skip ${{ inputs.MAVEN_ARGS }}
          fi
    
  scan-and-publish:
    needs: build
    runs-on: ubuntu-latest
    env:
      # These have to be exported into the environment due to how the setup-java action configures the Maven
      # settings.xml file to avoid directly embedding credentials into it.
      MAVEN_USERNAME: ${{ secrets.MVN_USER_NAME }}
      MAVEN_PASSWORD: ${{ secrets.MVN_USER_PWD }}
    permissions:
      id-token: write
      contents: read
    outputs:
      version: ${{ steps.project.outputs.version }}
    steps:
      - name: Check out Git repository
        uses: actions/checkout@v4

      - name: Install Java and Maven
        uses: actions/setup-java@v4
        with:
          java-version: ${{ inputs.JAVA_VERSION }}
          distribution: ${{ inputs.JDK }}
          cache: maven
          server-id: ${{ inputs.MAVEN_REPOSITORY_ID }}
          # Forced to use indirection here, the setup-java action configures the Maven settings.xml to reference
          # the credentials via environment variables
          server-username: MAVEN_USERNAME
          server-password: MAVEN_PASSWORD

      - name: Check whether GPG Signing is Enabled
        id: gpg-check
        run: |
          if [ "${{ secrets.GPG_PRIVATE_KEY }}" != "" ]; then
            echo "enabled=true" >> "$GITHUB_OUTPUT"
          else
            echo "enabled=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Import GPG key
        if: ${{ steps.gpg-check.outputs.enabled == 'true' }}
        uses: crazy-max/ghaction-import-gpg@v6
        with:
          gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }}
          passphrase: ${{ secrets.GPG_PASSPHRASE }}

      - name: Generate Extra Maven Arguments (if needed)
        id: extra-maven-args
        if: ${{ steps.gpg-check.outputs.enabled == 'false' }}
        shell: bash
        run: |
          echo "args=-Dgpg.skip=true" >> "$GITHUB_OUTPUT"

      - name: Trivy Cache
        id: trivy-cache
        uses: yogeshlonkar/trivy-cache-action@c09b68f72328987374e9daf2245707addf8910cb
        with:
          gh-token: ${{ secrets.GITHUB_TOKEN }}
          prefix: ${{ github.workflow }}

      - name: Download Trivy Java DB
        if: ${{ steps.trivy-cache.outputs.cache-hit == '' || steps.trivy-cache.outputs.cache-hit == 'false' }}
        uses: aquasecurity/trivy-action@master
        env:
          TRIVY_DOWNLOAD_JAVA_DB_ONLY: true
        with:
          scan-type: image
          cache-dir: .trivy

      - name: Trivy Vulnerability Scan
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: "fs"
          output: trivy-report.json
          format: json
          scan-ref: .
          exit-code: 0
          cache-dir: .trivy

      - name: Upload Vulnerability Scan Results
        uses: actions/upload-artifact@v4
        with:
          name: trivy-report
          path: trivy-report.json
          retention-days: 30

      - name: Fail build on High/Criticial Vulnerabilities
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: "fs"
          format: table
          scan-ref: .
          severity: HIGH,CRITICAL
          ignore-unfixed: true
          exit-code: 1
          cache-dir: .trivy

      - name: Detect Maven version
        id: project
        run: |
          echo version=$(mvn -q -Dexec.executable=echo -Dexec.args='${project.version}' --non-recursive exec:exec) >> $GITHUB_OUTPUT

      # NB - It's safe to skipTests for the Publish step because we just did a full mvn verify in the previous step
      #      which will have run all the unit and integration tests
      - name: Publish Maven SNAPSHOTs
        if: ${{ inputs.PUBLISH_SNAPSHOTS && github.ref_name == inputs.MAIN_BRANCH && steps.project.outputs.version != '' && contains(steps.project.outputs.version, 'SNAPSHOT') }}
        run: |
          mvn ${{ inputs.MAVEN_DEPLOY_GOALS }} --batch-mode -DskipTests -Daether.connector.basic.parallelPut=false ${{ inputs.MAVEN_ARGS }} ${{ steps.extra-maven-args.outputs.args }}

  github-release:
    needs: scan-and-publish
    if: ${{ github.ref_type == 'tag' && needs.scan-and-publish.outputs.version != '' && !contains(needs.scan-and-publish.outputs.version, 'SNAPSHOT') }}
    uses: telicent-oss/shared-workflows/.github/workflows/maven-github-release.yml@main
    with:
      CHANGELOG_FILE: ${{ inputs.CHANGELOG_FILE }}
      DOCKER_PROFILE: ${{ inputs.DOCKER_PROFILE }}
      JAVA_VERSION: ${{ inputs.JAVA_VERSION }}
      JDK: ${{ inputs.JDK }}
      MAVEN_ARGS: ${{ inputs.MAVEN_ARGS }}
      MAVEN_DEBUG_ARGS: ${{ inputs.MAVEN_DEBUG_ARGS }}
      MAVEN_DEPLOY_GOALS: ${{ inputs.MAVEN_DEPLOY_GOALS }}
    secrets: inherit
